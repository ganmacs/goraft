// Code generated by protoc-gen-go. DO NOT EDIT.
// source: leader_election.proto

/*
Package rproto is a generated protocol buffer package.

It is generated from these files:
	leader_election.proto

It has these top-level messages:
	VoteRequest
	VoteResult
*/
package rproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VoteRequest struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId uint32 `protobuf:"varint,2,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetCandidateId() uint32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

type VoteResult struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted" json:"vote_granted,omitempty"`
}

func (m *VoteResult) Reset()                    { *m = VoteResult{} }
func (m *VoteResult) String() string            { return proto.CompactTextString(m) }
func (*VoteResult) ProtoMessage()               {}
func (*VoteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VoteResult) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteResult) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*VoteRequest)(nil), "rproto.VoteRequest")
	proto.RegisterType((*VoteResult)(nil), "rproto.VoteResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LeaderElection service

type LeaderElectionClient interface {
	RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResult, error)
}

type leaderElectionClient struct {
	cc *grpc.ClientConn
}

func NewLeaderElectionClient(cc *grpc.ClientConn) LeaderElectionClient {
	return &leaderElectionClient{cc}
}

func (c *leaderElectionClient) RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResult, error) {
	out := new(VoteResult)
	err := grpc.Invoke(ctx, "/rproto.LeaderElection/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeaderElection service

type LeaderElectionServer interface {
	RequestVote(context.Context, *VoteRequest) (*VoteResult, error)
}

func RegisterLeaderElectionServer(s *grpc.Server, srv LeaderElectionServer) {
	s.RegisterService(&_LeaderElection_serviceDesc, srv)
}

func _LeaderElection_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rproto.LeaderElection/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServer).RequestVote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeaderElection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rproto.LeaderElection",
	HandlerType: (*LeaderElectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _LeaderElection_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leader_election.proto",
}

func init() { proto.RegisterFile("leader_election.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x49, 0x4d, 0x4c,
	0x49, 0x2d, 0x8a, 0x4f, 0xcd, 0x49, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x2b, 0x02, 0xd3, 0x4a, 0x2e, 0x5c, 0xdc, 0x61, 0xf9, 0x25, 0xa9, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x25, 0xa9, 0x45, 0xb9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x2c, 0x41, 0x60, 0xb6, 0x90, 0x22, 0x17, 0x4f, 0x72, 0x62, 0x5e, 0x4a, 0x66, 0x4a,
	0x62, 0x49, 0x6a, 0x7c, 0x66, 0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x37, 0x5c, 0xcc,
	0x33, 0x45, 0xc9, 0x99, 0x8b, 0x0b, 0x62, 0x4a, 0x71, 0x69, 0x0e, 0x4e, 0x43, 0xca, 0xf2, 0x4b,
	0x52, 0xe3, 0xd3, 0x8b, 0x12, 0xf3, 0x4a, 0x52, 0x21, 0x86, 0x70, 0x04, 0x71, 0x83, 0xc4, 0xdc,
	0x21, 0x42, 0x46, 0x5e, 0x5c, 0x7c, 0x3e, 0x60, 0xb7, 0xba, 0x42, 0x9d, 0x2a, 0x64, 0xc1, 0xc5,
	0x0d, 0x75, 0x18, 0xc8, 0x74, 0x21, 0x61, 0x3d, 0x88, 0xa3, 0xf5, 0x90, 0x5c, 0x2c, 0x25, 0x84,
	0x2a, 0x08, 0x72, 0x80, 0x12, 0x43, 0x12, 0x1b, 0x58, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x3f, 0x24, 0xaf, 0x01, 0xfe, 0x00, 0x00, 0x00,
}
